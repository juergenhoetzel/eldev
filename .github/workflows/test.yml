# NOTE: The following complications are for Eldev itself.  Projects
# that _use_ Eldev can have it simpler.  Please see the homepage:
#
#     https://github.com/doublep/eldev#github-workflows

name: CI

on:
  push:
    paths-ignore: ['**.adoc']
    branches-ignore: ['future-doc']
  pull_request:
    paths-ignore: ['**.adoc']
    branches-ignore: ['future-doc']

jobs:
  test:
    runs-on: ${{matrix.os}}
    continue-on-error: ${{matrix.emacs_version == 'snapshot'}}

    strategy:
      matrix:
        os: [ubuntu-latest]
        emacs_version: ['24.4', '24.5', '25.1', '25.2', '25.3', '26.1', '26.2', '26.3', '27.1', 'snapshot']
        include:
          - os: macos-latest
            emacs_version: '26.3'
          - os: macos-latest
            emacs_version: 'snapshot'
          - os: windows-latest
            emacs_version: '27.1'

    steps:
    - name: Set up Emacs
      if: "!startsWith (matrix.os, 'windows')"
      uses: purcell/setup-emacs@master
      with:
        version: ${{matrix.emacs_version}}

    - name: Set up Emacs on Windows
      if: startsWith (matrix.os, 'windows')
      run: |
        Set-ExecutionPolicy RemoteSigned -scope CurrentUser
        Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
        scoop update
        scoop bucket add extras
        scoop install emacs@${{ matrix.emacs_version }}
        echo "$env:PATH" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    - name: Set up additional packages (Ubuntu)
      if: startsWith (matrix.os, 'ubuntu')
      run: sudo apt-get -y install texinfo mercurial subversion
    - name: Set up additional packages (macOS)
      if: startsWith (matrix.os, 'macos')
      run: brew install texinfo mercurial subversion

    - name: Set git to use LF
      run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

    - name: Check out the source code
      uses: actions/checkout@v2


    - name: Add to PATH
      run: echo "$(get-location)\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      if: "startsWith (matrix.os, 'windows')"
    - name: Add to PATH
      run: echo "$PWD/bin" >> $GITHUB_PATH
      if: "!startsWith (matrix.os, 'windows')"

    # Method 1: if you have a catch-all directory for executables.  We
    # don't test bootstrapping, as that is supposed to have been
    # tested by normal ERT tests.
    - name: Test installation 1
      uses: actions/github-script@v3
      with:
        script: |
          const exec = require('util').promisify(require('child_process').exec);
          const {downloadScript,expandTilde} = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/util.js`);

          const fakeBin = expandTilde('~/fake-bin');
          await io.mkdirP(fakeBin);
          const script = await downloadScript(github, context, "bin/eldev", fakeBin);
          const eldev_out = await exec(script);
          console.log(eldev_out.stdout);

    # Method 2: general case, with Eldev script installed to
    # `~/.eldev/bin'.  We don't add it to `$PATH' as we run it using the absolute path
    - name: Test installation 2
      uses: actions/github-script@v3
      with:
        script: |
          const fs = require('fs');
          const exec = require('util').promisify(require('child_process').exec);
          const {getRawUrl,downloadScript,expandTilde} = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/util.js`);

          if (fs.existsSync(expandTilde("~/.eldev/bin/eldev")))
              throw("~/.eldev/bin/eldev already exists");
          await io.mkdirP('tmp');
          const script = await downloadScript(github, context, "webinstall/eldev", 'tmp');
          const eldev_bin_url = getRawUrl(context,"bin/eldev");
          await exec(`${script} ${eldev_bin_url}`);
          const eldev_out = await exec(expandTilde("~/.eldev/bin/eldev"));
          console.log(eldev_out.stdout);
          await io.rmRF(expandTilde("~/.eldev/bin"));

    # GitHub-specific installation specifically for workflows.
    - name: Test GitHub-specific installation
      uses: actions/github-script@v3
      with:
        script: |
          const fs = require('fs');
          const exec = require('util').promisify(require('child_process').exec);
          const {getRawUrl,downloadScript,expandTilde} = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/util.js`);
          if (fs.existsSync(expandTilde("~/.eldev/bin/eldev")))
              throw("~/.eldev/bin/eldev already exists");
          await io.mkdirP('tmp');
          const script = await downloadScript(github, context, "webinstall/github-eldev", 'tmp');
          const eldev_bin_url = getRawUrl(context,"bin/eldev");
          await exec(`${script} ${eldev_bin_url}`);
          const eldev_out = await exec(expandTilde("~/.eldev/bin/eldev"));
          console.log(eldev_out.stdout);
          await io.rmRF(expandTilde("~/.eldev/bin"));

