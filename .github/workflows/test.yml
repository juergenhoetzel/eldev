# NOTE: The following complications are for Eldev itself.  Projects
# that _use_ Eldev can have it simpler.  Please see the homepage:
#
#     https://github.com/doublep/eldev#github-workflows

name: CI

on:
  push:
    paths-ignore: ['**.adoc']
    branches-ignore: ['future-doc']
  pull_request:
    paths-ignore: ['**.adoc']
    branches-ignore: ['future-doc']

jobs:
  test:
    runs-on: ${{matrix.os}}
    continue-on-error: ${{matrix.emacs_version == 'snapshot'}}

    strategy:
      matrix:
        os: [ubuntu-latest]
        emacs_version: ['24.4', '24.5', '25.1', '25.2', '25.3', '26.1', '26.2', '26.3', '27.1', 'snapshot']
        include:
          - os: macos-latest
            emacs_version: '26.3'
          - os: macos-latest
            emacs_version: 'snapshot'

    steps:
    - name: Set up Emacs
      uses: purcell/setup-emacs@master
      with:
        version: ${{matrix.emacs_version}}

    - name: Set up additional packages (Ubuntu)
      if: startsWith (matrix.os, 'ubuntu')
      run: sudo apt-get -y install texinfo mercurial subversion
    - name: Set up additional packages (macOS)
      if: startsWith (matrix.os, 'macos')
      run: brew install texinfo mercurial subversion

    - name: Set git to use LF
      run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

    - name: Check out the source code
      uses: actions/checkout@v2

    - name: Test the project
      run: |
        ELDEV_LOCAL=. ./bin/eldev -p -dtTC test --omit-backtraces --expect 200
        ELDEV_LOCAL=. ./bin/eldev -p -dtTC test --test-type integration --omit-backtraces --expect 5

    - name: Ensure clean byte-compilation
      run: |
        # Also require that byte-compilation produces no warnings.
        # We'd use Eldev itself to byte-compile, but that could hide
        # some problems (for Eldev itself, other packages should be
        # fine) by indirectly loading `.el' first.
        emacs --batch --eval "(progn
                                (require 'bytecomp)
                                (let ((byte-compile-error-on-warn t))
                                  (push default-directory load-path)
                                  (unless (and (byte-compile-file \"eldev-util.el\")
                                               (byte-compile-file \"eldev.el\")
                                               (byte-compile-file \"eldev-ert.el\")
                                               (byte-compile-file \"eldev-buttercup.el\")
                                               (byte-compile-file \"eldev-plugins.el\"))
                                    (kill-emacs 1))))"
        # Ensure that our tests can be compiled cleanly: warnings
        # might indicate something is wrong with the test.  Here we
        # can already use Eldev.
        ELDEV_LOCAL=. ./bin/eldev -p -dtTC compile --set test --warnings-as-errors

    - name: Lint the project
      run: |
        # Run `relint' on Eldev's source code, more as a test of
        # Eldev--relint integration, because we use `rx' macro.
        ELDEV_LOCAL=. ./bin/eldev -p -dtTC lint re

    # Method 1: if you have a catch-all directory for executables.
    # Calling the eldev script will test that it will be bootstraped
    # correctly when downloaded from the RAW URL.
    - name: Test installation 1
      uses: actions/github-script@v3
      with:
        script: |
          const exec = require('util').promisify(require('child_process').exec);
          const {downloadScript,expandTilde} = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/util.js`);

          const fakeBin = expandTilde('~/fake-bin');
          await io.mkdirP(fakeBin);
          const script = await downloadScript(github, context, "bin/eldev", fakeBin);
          const eldev_out = await exec(script);
          console.log(eldev_out.stdout);

    # Method 2: general case, with Eldev script installed to
    # `~/.eldev/bin'.  We don't add it to `$PATH' as we never run it.
    - name: Test installation 2
      uses: actions/github-script@v3
      with:
        script: |
          const fs = require('fs');
          const exec = require('util').promisify(require('child_process').exec);
          const {downloadScript,expandTilde} = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/util.js`);

          if (fs.existsSync(expandTilde("~/.eldev/bin/eldev")))
              throw("~/.eldev/bin/eldev already exists");
          await io.mkdirP('tmp');
          const script = await downloadScript(github, context, "webinstall/eldev", 'tmp');
          await exec(script);
          const eldev_out = await exec(expandTilde("~/.eldev/bin/eldev"));
          console.log(eldev_out.stdout);
          await io.rmRF(expandTilde("~/.eldev/bin"));

    # GitHub-specific installation specifically for workflows.
    - name: Test GitHub-specific installation
      uses: actions/github-script@v3
      with:
        script: |
          const fs = require('fs');
          const exec = require('util').promisify(require('child_process').exec);
          const {downloadScript,expandTilde} = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/util.js`);
          if (fs.existsSync(expandTilde("~/.eldev/bin/eldev")))
              throw("~/.eldev/bin/eldev already exists");
          await io.mkdirP('tmp');
          const script = await downloadScript(github, context, "webinstall/github-eldev", 'tmp');
          await exec(script);
          const eldev_out = await exec(expandTilde("~/.eldev/bin/eldev"));
          console.log(eldev_out.stdout);
          await io.rmRF(expandTilde("~/.eldev/bin"));

